// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ESA.Core;

namespace ESA.Core.Data
{
    public partial class AcademyDbContext : DbContext
    {
        public AcademyDbContext()
        {
        }

        public AcademyDbContext(DbContextOptions<AcademyDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<AccountProfile> AccountProfile { get; set; }
        public virtual DbSet<AccountSurvey> AccountSurvey { get; set; }
        public virtual DbSet<Coupons> Coupons { get; set; }
        public virtual DbSet<Course> Course { get; set; }
        public virtual DbSet<CourseCalendar> CourseCalendar { get; set; }
        public virtual DbSet<CourseReview> CourseReview { get; set; }
        public virtual DbSet<CourseSchedule> CourseSchedule { get; set; }
        public virtual DbSet<CourseStudent> CourseStudent { get; set; }
        public virtual DbSet<CourseStudentFriend> CourseStudentFriend { get; set; }
        public virtual DbSet<CourseStudentGroup> CourseStudentGroup { get; set; }
        public virtual DbSet<Invoice> Invoice { get; set; }
        public virtual DbSet<InvoiceConfig> InvoiceConfig { get; set; }
        public virtual DbSet<InvoiceDetail> InvoiceDetail { get; set; }
        public virtual DbSet<LessonsPack> LessonsPack { get; set; }
        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<Payment> Payment { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethod { get; set; }
        public virtual DbSet<PaymentStatus> PaymentStatus { get; set; }
        public virtual DbSet<Refund> Refund { get; set; }
        public virtual DbSet<RefundStatus> RefundStatus { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<SaleTax> SaleTax { get; set; }
        public virtual DbSet<Setting> Setting { get; set; }
        public virtual DbSet<StudentPacks> StudentPacks { get; set; }
        public virtual DbSet<Tax> Tax { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseNpgsql("Persist Security Info=True;Client Certificate=C:\\Users\\Tracy\\Downloads\\ca-certificate.crt;SSL Mode=Require;Password=AVNS_WET-02hC8zD4X7CZrbs;Username=doadmin;Database=academy;Port=25060;Host=esa-db-postgresql-stage-do-user-12122388-0.b.db.ondigitalocean.com");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>(entity =>
            {
                entity.ToTable("account", "private");

                entity.HasIndex(e => new { e.FirstName, e.LastName, e.Email, e.RoleId }, "ix_account");

                entity.HasIndex(e => new { e.Email, e.RoleId }, "un_account")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(320)
                    .HasColumnName("email");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("first_name");

                entity.Property(e => e.IsActive).HasColumnName("is_active");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("last_name");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.Password)
                    .HasMaxLength(180)
                    .HasColumnName("password");

                entity.Property(e => e.ProfilePicture).HasColumnName("profile_picture");

                entity.Property(e => e.ProfilePicturePath)
                    .HasMaxLength(500)
                    .HasColumnName("profile_picture_path")
                    .HasComment("URL from Auth0");

                entity.Property(e => e.RoleId).HasColumnName("role_id");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.Account)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_account_role");
            });

            modelBuilder.Entity<AccountProfile>(entity =>
            {
                entity.ToTable("account_profile", "private");

                entity.HasIndex(e => new { e.AccountId, e.NationalityCode }, "ix_account_profile");

                entity.HasIndex(e => e.AccountId, "un_account_profile")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AboutMe)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("about_me");

                entity.Property(e => e.AccountId).HasColumnName("account_id");

                entity.Property(e => e.CityName)
                    .HasMaxLength(50)
                    .HasColumnName("city_name");

                entity.Property(e => e.DateOfBirth).HasColumnName("date_of_birth");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.NationalityCode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("nationality_code")
                    .IsFixedLength();

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(25)
                    .HasColumnName("phone_number");

                entity.Property(e => e.ZoomLink)
                    .HasMaxLength(250)
                    .HasColumnName("zoom_link");

                entity.HasOne(d => d.Account)
                    .WithOne(p => p.AccountProfile)
                    .HasForeignKey<AccountProfile>(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_account");
            });

            modelBuilder.Entity<AccountSurvey>(entity =>
            {
                entity.ToTable("account_survey", "private");

                entity.HasIndex(e => e.AccountId, "un_account_survey")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountId).HasColumnName("account_id");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.MediaInfo)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("media_info");

                entity.Property(e => e.RecommendedBy)
                    .HasMaxLength(80)
                    .HasColumnName("recommended_by");

                entity.HasOne(d => d.Account)
                    .WithOne(p => p.AccountSurvey)
                    .HasForeignKey<AccountSurvey>(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_account_survey");
            });

            modelBuilder.Entity<Coupons>(entity =>
            {
                entity.ToTable("coupons", "private");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coupon)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("coupon");

                entity.Property(e => e.Discount).HasColumnName("discount");

                entity.Property(e => e.IsActive).HasColumnName("is_active");
            });

            modelBuilder.Entity<Course>(entity =>
            {
                entity.ToTable("course", "private");

                entity.HasIndex(e => new { e.Code, e.Title, e.Subtitle, e.Price, e.DurationDays }, "ix_course");

                entity.HasIndex(e => e.Code, "un_course")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.About)
                    .IsRequired()
                    .HasColumnName("about");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("code");

                entity.Property(e => e.Content)
                    .IsRequired()
                    .HasColumnName("content");

                entity.Property(e => e.CurrencyCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("currency_code");

                entity.Property(e => e.DurationDays).HasColumnName("duration_days");

                entity.Property(e => e.Icon)
                    .IsRequired()
                    .HasColumnName("icon");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasColumnName("is_active")
                    .HasDefaultValueSql("true");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.Price)
                    .HasPrecision(5, 2)
                    .HasColumnName("price");

                entity.Property(e => e.Subtitle)
                    .IsRequired()
                    .HasMaxLength(120)
                    .HasColumnName("subtitle");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(80)
                    .HasColumnName("title");
            });

            modelBuilder.Entity<CourseCalendar>(entity =>
            {
                entity.ToTable("course_calendar", "private");

                entity.HasIndex(e => new { e.CourseId, e.TeacherId, e.StartDate, e.FinishDate }, "ix_couser_calendar");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CourseId).HasColumnName("course_id");

                entity.Property(e => e.FinishDate).HasColumnName("finish_date");

                entity.Property(e => e.IsActive).HasColumnName("is_active");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.StartDate).HasColumnName("start_date");

                entity.Property(e => e.TeacherId)
                    .HasColumnName("teacher_id")
                    .HasComment("Assigned teacher");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseCalendar)
                    .HasForeignKey(d => d.CourseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_course_calendar_course");

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.CourseCalendar)
                    .HasForeignKey(d => d.TeacherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_course_calendar_account");
            });

            modelBuilder.Entity<CourseReview>(entity =>
            {
                entity.ToTable("course_review", "private");

                entity.HasIndex(e => new { e.CourseStudentId, e.Comment, e.Rating }, "ix_course_review");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasMaxLength(120)
                    .HasColumnName("comment");

                entity.Property(e => e.CourseCalendarId).HasColumnName("course_calendar_id");

                entity.Property(e => e.CourseStudentId).HasColumnName("course_student_id");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.Rating).HasColumnName("rating");

                entity.HasOne(d => d.CourseCalendar)
                    .WithMany(p => p.CourseReview)
                    .HasForeignKey(d => d.CourseCalendarId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_course_review_course_calendar");

                entity.HasOne(d => d.CourseStudent)
                    .WithMany(p => p.CourseReview)
                    .HasForeignKey(d => d.CourseStudentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_course_review_course_student");
            });

            modelBuilder.Entity<CourseSchedule>(entity =>
            {
                entity.ToTable("course_schedule", "private");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CourseCalendarId).HasColumnName("course_calendar_id");

                entity.Property(e => e.IsActive).HasColumnName("is_active");

                entity.Property(e => e.IsPrivate).HasColumnName("is_private");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.Minutes).HasColumnName("minutes");

                entity.Property(e => e.Schedule)
                    .HasPrecision(6)
                    .HasColumnName("schedule");

                entity.Property(e => e.StudentsAllowed).HasColumnName("students_allowed");

                entity.HasOne(d => d.CourseCalendar)
                    .WithMany(p => p.CourseSchedule)
                    .HasForeignKey(d => d.CourseCalendarId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_course_schedule_course_calendar_1");
            });

            modelBuilder.Entity<CourseStudent>(entity =>
            {
                entity.ToTable("course_student", "private");

                entity.HasIndex(e => new { e.StudentId, e.Progress, e.CourseScheduleId }, "ix_course_student");

                entity.HasIndex(e => new { e.EnrolledDate, e.LastUpdate }, "ix_course_student_date");

                entity.HasIndex(e => e.Id, "un_course_student")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Amount)
                    .HasPrecision(6, 2)
                    .HasColumnName("amount")
                    .HasComment("Monto total de la compra");

                entity.Property(e => e.CourseScheduleId).HasColumnName("course_schedule_id");

                entity.Property(e => e.Discount)
                    .HasPrecision(3, 2)
                    .HasColumnName("discount")
                    .HasComment("Descuento de la clase");

                entity.Property(e => e.EnrolledDate)
                    .HasPrecision(6)
                    .HasColumnName("enrolled_date");

                entity.Property(e => e.IsActive).HasColumnName("is_active");

                entity.Property(e => e.IsCancelled).HasColumnName("is_cancelled");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.PaymentConfirmed).HasColumnName("payment_confirmed");

                entity.Property(e => e.Progress)
                    .HasPrecision(3, 2)
                    .HasColumnName("progress");

                entity.Property(e => e.StudentId).HasColumnName("student_id");

                entity.Property(e => e.TimePurchased)
                    .HasColumnName("time_purchased")
                    .HasComment("Minutos que el estudiante compra");

                entity.HasOne(d => d.CourseSchedule)
                    .WithMany(p => p.CourseStudent)
                    .HasForeignKey(d => d.CourseScheduleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_course_student_course_schedule");

                entity.HasOne(d => d.Student)
                    .WithMany(p => p.CourseStudent)
                    .HasForeignKey(d => d.StudentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_course_student_account");
            });

            modelBuilder.Entity<CourseStudentFriend>(entity =>
            {
                entity.ToTable("course_student_friend", "private");

                entity.HasIndex(e => new { e.CourseStudentId, e.Email }, "un_course_student_friend")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CourseStudentId).HasColumnName("course_student_id");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(320)
                    .HasColumnName("email");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(80)
                    .HasColumnName("name");

                entity.HasOne(d => d.CourseStudent)
                    .WithMany(p => p.CourseStudentFriend)
                    .HasForeignKey(d => d.CourseStudentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("course_student_friend_fk");
            });

            modelBuilder.Entity<CourseStudentGroup>(entity =>
            {
                entity.ToTable("course_student_group", "private");

                entity.HasIndex(e => new { e.CourseCalendarId, e.StudentId }, "un_course_student_group")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Amount)
                    .HasPrecision(6, 2)
                    .HasColumnName("amount");

                entity.Property(e => e.CourseCalendarId).HasColumnName("course_calendar_id");

                entity.Property(e => e.EnrolledDate)
                    .HasPrecision(6)
                    .HasColumnName("enrolled_date")
                    .HasDefaultValueSql("(now() AT TIME ZONE 'utc'::text)");

                entity.Property(e => e.InvoiceConfirmed).HasColumnName("invoice_confirmed");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasColumnName("is_active")
                    .HasDefaultValueSql("true");

                entity.Property(e => e.IsCancelled).HasColumnName("is_cancelled");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update")
                    .HasDefaultValueSql("(now() AT TIME ZONE 'utc'::text)");

                entity.Property(e => e.PaymentConfirmed)
                    .IsRequired()
                    .HasColumnName("payment_confirmed")
                    .HasDefaultValueSql("true");

                entity.Property(e => e.Progress)
                    .HasPrecision(3, 2)
                    .HasColumnName("progress")
                    .HasDefaultValueSql("0.00");

                entity.Property(e => e.StudentId).HasColumnName("student_id");

                entity.HasOne(d => d.CourseCalendar)
                    .WithMany(p => p.CourseStudentGroup)
                    .HasForeignKey(d => d.CourseCalendarId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_course_student_group_calendar");

                entity.HasOne(d => d.Student)
                    .WithMany(p => p.CourseStudentGroup)
                    .HasForeignKey(d => d.StudentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_course_student_group_student");
            });

            modelBuilder.Entity<Invoice>(entity =>
            {
                entity.ToTable("invoice", "private");

                entity.HasIndex(e => new { e.Code, e.Subtotal, e.Discount, e.NetAmount, e.LastUpdate }, "ix_invoice_amount");

                entity.HasIndex(e => e.InvoiceConfigId, "ix_invoice_pay");

                entity.HasIndex(e => e.Code, "un_invoice")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ChangeAmount)
                    .HasPrecision(5, 2)
                    .HasColumnName("change_amount");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("code");

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(120)
                    .HasColumnName("customer_name");

                entity.Property(e => e.CustomerRtn)
                    .HasMaxLength(15)
                    .HasColumnName("customer_rtn");

                entity.Property(e => e.Discount)
                    .HasPrecision(5, 2)
                    .HasColumnName("discount");

                entity.Property(e => e.InvoiceConfigId).HasColumnName("invoice_config_id");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.NetAmount)
                    .HasPrecision(5, 2)
                    .HasColumnName("net_amount");

                entity.Property(e => e.NetAmountWords)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("net_amount_words");

                entity.Property(e => e.NumberCerExonerated)
                    .HasMaxLength(50)
                    .HasColumnName("number_cer_exonerated");

                entity.Property(e => e.NumberExeOrder)
                    .HasMaxLength(50)
                    .HasColumnName("number_exe_order");

                entity.Property(e => e.NumberRegSag)
                    .HasMaxLength(50)
                    .HasColumnName("number_reg_sag");

                entity.Property(e => e.PaymentConfirmed).HasColumnName("payment_confirmed");

                entity.Property(e => e.ReceivedAmount)
                    .HasPrecision(5, 2)
                    .HasColumnName("received_amount");

                entity.Property(e => e.Subtotal)
                    .HasPrecision(5, 2)
                    .HasColumnName("subtotal");

                entity.Property(e => e.TaxExemptAmount)
                    .HasPrecision(5, 2)
                    .HasColumnName("tax_exempt_amount");

                entity.Property(e => e.TaxExoneratedAmount)
                    .HasPrecision(5, 2)
                    .HasColumnName("tax_exonerated_amount");

                entity.HasOne(d => d.InvoiceConfig)
                    .WithMany(p => p.Invoice)
                    .HasForeignKey(d => d.InvoiceConfigId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_invoice_invoice_config");
            });

            modelBuilder.Entity<InvoiceConfig>(entity =>
            {
                entity.ToTable("invoice_config", "private");

                entity.HasIndex(e => new { e.Rtn, e.Cai, e.AmountRequested, e.AmountGranted, e.Invoices }, "ix_invoice_config");

                entity.HasIndex(e => new { e.ReceptionDate, e.IssueDeadline, e.CurrentDate, e.LastUpdate }, "ix_invoice_config_date");

                entity.HasIndex(e => new { e.Rtn, e.Cai }, "un_invoice_config")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AmountGranted).HasColumnName("amount_granted");

                entity.Property(e => e.AmountRequested).HasColumnName("amount_requested");

                entity.Property(e => e.BusinessName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("business_name");

                entity.Property(e => e.Cai)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("cai");

                entity.Property(e => e.CastRange)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("cast_range");

                entity.Property(e => e.CurrentDate).HasColumnName("current_date");

                entity.Property(e => e.DeclarationNumber)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("declaration_number");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(320)
                    .HasColumnName("email_address");

                entity.Property(e => e.EndRange)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("end_range");

                entity.Property(e => e.Invoices).HasColumnName("invoices");

                entity.Property(e => e.IsActive).HasColumnName("is_active");

                entity.Property(e => e.IssueDeadline).HasColumnName("issue_deadline");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.LocationId).HasColumnName("location_id");

                entity.Property(e => e.PhoneMobile)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("phone_mobile");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("phone_number");

                entity.Property(e => e.ProfessionName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("profession_name");

                entity.Property(e => e.ReceptionDate).HasColumnName("reception_date");

                entity.Property(e => e.Rtn)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("rtn");

                entity.Property(e => e.StartRange)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("start_range");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.InvoiceConfig)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_invoice_config_location");
            });

            modelBuilder.Entity<InvoiceDetail>(entity =>
            {
                entity.ToTable("invoice_detail", "private");

                entity.HasIndex(e => new { e.InvoiceId, e.CourseStudentId, e.NetAmount }, "ix_invoice_detail");

                entity.HasIndex(e => new { e.InvoiceId, e.CourseStudentId }, "un_invoice_detail")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CourseStudentId).HasColumnName("course_student_id");

                entity.Property(e => e.InvoiceId).HasColumnName("invoice_id");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.NetAmount)
                    .HasPrecision(5, 2)
                    .HasColumnName("net_amount");

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.Taxed).HasColumnName("taxed");

                entity.Property(e => e.UnitPrice)
                    .HasPrecision(5, 2)
                    .HasColumnName("unit_price");

                entity.HasOne(d => d.CourseStudent)
                    .WithMany(p => p.InvoiceDetail)
                    .HasForeignKey(d => d.CourseStudentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_invoice_detail_course_student");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.InvoiceDetail)
                    .HasForeignKey(d => d.InvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_invoice_detail_invoice");
            });

            modelBuilder.Entity<LessonsPack>(entity =>
            {
                entity.ToTable("lessons_pack", "private");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Hours).HasColumnName("hours");

                entity.Property(e => e.IsActive).HasColumnName("is_active");

                entity.Property(e => e.Minutes).HasColumnName("minutes");

                entity.Property(e => e.Price)
                    .HasPrecision(8, 2)
                    .HasColumnName("price");

                entity.Property(e => e.Savings)
                    .HasPrecision(8, 2)
                    .HasColumnName("savings");
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.ToTable("location", "private");

                entity.HasIndex(e => new { e.CountryCode, e.ProvinceName, e.DistrictName }, "ix_location");

                entity.HasIndex(e => new { e.CountryCode, e.ProvinceName, e.DistrictName, e.Neighborhood, e.Street }, "un_location")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AddressReference)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("address_reference");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("country_code")
                    .IsFixedLength();

                entity.Property(e => e.DistrictName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("district_name");

                entity.Property(e => e.IsActive).HasColumnName("is_active");

                entity.Property(e => e.LasUpdate)
                    .HasPrecision(6)
                    .HasColumnName("las_update");

                entity.Property(e => e.Neighborhood)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("neighborhood");

                entity.Property(e => e.ProvinceName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("province_name");

                entity.Property(e => e.Street)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("street");
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.ToTable("payment", "private");

                entity.HasIndex(e => new { e.OrderCode, e.PayCode, e.AmountCode, e.AmountValue }, "ix_payment");

                entity.HasIndex(e => new { e.CreationDate, e.LastUpdate }, "ix_payment_date");

                entity.HasIndex(e => new { e.PaymentMethodId, e.PaymentStatusId }, "ix_payment_id");

                entity.HasIndex(e => new { e.OrderCode, e.PayCode }, "un_payment")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AmountCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("amount_code");

                entity.Property(e => e.AmountValue)
                    .HasPrecision(5, 2)
                    .HasColumnName("amount_value");

                entity.Property(e => e.CreationDate)
                    .HasPrecision(6)
                    .HasColumnName("creation_date");

                entity.Property(e => e.GrossAmountCode)
                    .HasMaxLength(10)
                    .HasColumnName("gross_amount_code");

                entity.Property(e => e.GrossAmountValue)
                    .HasPrecision(5, 2)
                    .HasColumnName("gross_amount_value");

                entity.Property(e => e.InvoiceId).HasColumnName("invoice_id");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.NetAmountCode)
                    .HasMaxLength(10)
                    .HasColumnName("net_amount_code");

                entity.Property(e => e.NetAmountValue)
                    .HasPrecision(5, 2)
                    .HasColumnName("net_amount_value");

                entity.Property(e => e.OrderCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("order_code")
                    .HasComment("PayPal Id");

                entity.Property(e => e.PayCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("pay_code");

                entity.Property(e => e.PayerEmailAddress)
                    .IsRequired()
                    .HasMaxLength(320)
                    .HasColumnName("payer_email_address");

                entity.Property(e => e.PaymentMethodId).HasColumnName("payment_method_id");

                entity.Property(e => e.PaymentStatusId).HasColumnName("payment_status_id");

                entity.Property(e => e.PaypalFeeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("paypal_fee_code");

                entity.Property(e => e.PaypalFeeValue)
                    .HasPrecision(5, 2)
                    .HasColumnName("paypal_fee_value");

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.Payment)
                    .HasForeignKey(d => d.InvoiceId)
                    .HasConstraintName("fk_payment_invoice");

                entity.HasOne(d => d.PaymentMethod)
                    .WithMany(p => p.Payment)
                    .HasForeignKey(d => d.PaymentMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_payment_payment_method");

                entity.HasOne(d => d.PaymentStatus)
                    .WithMany(p => p.Payment)
                    .HasForeignKey(d => d.PaymentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_payment_payment_status");
            });

            modelBuilder.Entity<PaymentMethod>(entity =>
            {
                entity.ToTable("payment_method", "private");

                entity.HasIndex(e => e.Name, "ix_payment_method");

                entity.HasIndex(e => e.Name, "un_payment_method")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsActive).HasColumnName("is_active");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<PaymentStatus>(entity =>
            {
                entity.ToTable("payment_status", "private");

                entity.HasIndex(e => e.Name, "ix_payment_status");

                entity.HasIndex(e => e.Name, "un_payment_status")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Refund>(entity =>
            {
                entity.ToTable("refund", "private");

                entity.HasIndex(e => new { e.Reason, e.CreatedBy, e.LastUpdate }, "ix_refund");

                entity.HasIndex(e => new { e.PaymentId, e.RefundStatusId }, "ix_refund_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasMaxLength(255)
                    .HasColumnName("comment");

                entity.Property(e => e.CreatedBy)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("created_by");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.PaymentId).HasColumnName("payment_id");

                entity.Property(e => e.Percent)
                    .HasPrecision(3, 2)
                    .HasColumnName("percent");

                entity.Property(e => e.PercentReturned)
                    .HasPrecision(3, 2)
                    .HasColumnName("percent_returned");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("reason");

                entity.Property(e => e.RefundStatusId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("refund_status_id");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.Refund)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_refund_account");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.Refund)
                    .HasForeignKey(d => d.PaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_refund_payment");

                entity.HasOne(d => d.RefundStatus)
                    .WithMany(p => p.Refund)
                    .HasForeignKey(d => d.RefundStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_refund_refund_status");
            });

            modelBuilder.Entity<RefundStatus>(entity =>
            {
                entity.ToTable("refund_status", "private");

                entity.HasIndex(e => e.Name, "ix_refund_status");

                entity.HasIndex(e => e.Name, "un_refund_status")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.ToTable("role", "private");

                entity.HasIndex(e => e.Name, "ix_role");

                entity.HasIndex(e => e.Name, "un_role")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsActive).HasColumnName("is_active");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<SaleTax>(entity =>
            {
                entity.ToTable("sale_tax", "private");

                entity.HasIndex(e => new { e.InvoiceDetailId, e.TaxId, e.TaxPercent, e.TaxAmount }, "ix_sale_tax");

                entity.HasIndex(e => new { e.InvoiceDetailId, e.TaxId }, "un_sale_tax")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InvoiceDetailId).HasColumnName("invoice_detail_id");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.TaxAmount)
                    .HasPrecision(5, 2)
                    .HasColumnName("tax_amount");

                entity.Property(e => e.TaxId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("tax_id");

                entity.Property(e => e.TaxPercent)
                    .HasPrecision(3, 2)
                    .HasColumnName("tax_percent");

                entity.HasOne(d => d.InvoiceDetail)
                    .WithMany(p => p.SaleTax)
                    .HasForeignKey(d => d.InvoiceDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_sale_tax_invoice_detail");

                entity.HasOne(d => d.Tax)
                    .WithMany(p => p.SaleTax)
                    .HasForeignKey(d => d.TaxId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_sale_tax_tax");
            });

            modelBuilder.Entity<Setting>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("setting_pkey");

                entity.ToTable("setting", "private");

                entity.HasIndex(e => new { e.Code, e.Value }, "ix_");

                entity.Property(e => e.Code)
                    .HasMaxLength(20)
                    .HasColumnName("code");

                entity.Property(e => e.IsActive).HasColumnName("is_active");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("value");
            });

            modelBuilder.Entity<StudentPacks>(entity =>
            {
                entity.ToTable("student_packs", "private");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdAccount).HasColumnName("id_account");

                entity.Property(e => e.IdPack).HasColumnName("id_pack");

                entity.Property(e => e.IsActive).HasColumnName("is_active");

                entity.Property(e => e.LeftMinutes).HasColumnName("left_minutes");

                entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

                entity.HasOne(d => d.IdAccountNavigation)
                    .WithMany(p => p.StudentPacks)
                    .HasForeignKey(d => d.IdAccount)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("student_packs_id_account_fkey");

                entity.HasOne(d => d.IdPackNavigation)
                    .WithMany(p => p.StudentPacks)
                    .HasForeignKey(d => d.IdPack)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("student_packs_id_pack_fkey");
            });

            modelBuilder.Entity<Tax>(entity =>
            {
                entity.ToTable("tax", "private");

                entity.HasIndex(e => new { e.Name, e.Percent }, "ix_tax");

                entity.HasIndex(e => e.Name, "un_tax")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsActive).HasColumnName("is_active");

                entity.Property(e => e.LastUpdate)
                    .HasPrecision(6)
                    .HasColumnName("last_update");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("name");

                entity.Property(e => e.Percent)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}